node('container') {
  sh 'docker rm -f e2e chrome firefox opera mediasoup || true'
  sh 'sudo rm -rf /opt/openvidu/* || true'
  parallel (
    'Download fake video': {
      sh(script: '''#!/bin/bash -xe
        FAKE_VIDEO=/opt/openvidu-cache/barcode.y4m
        if [ ! -f $FAKE_VIDEO ]; then
          sudo curl --location https://github.com/OpenVidu/openvidu/raw/master/openvidu-test-e2e/docker/barcode.y4m --create-dirs --output /opt/openvidu-cache/barcode.y4m
        else
          echo "File $FAKE_VIDEO already exists"
        fi
      '''.stripIndent())
    },
    'Download fake audio': {
      sh(script: '''#!/bin/bash -xe
        FAKE_AUDIO=/opt/openvidu-cache/fakeaudio.wav
        if [ ! -f $FAKE_AUDIO ]; then
          sudo curl --location https://github.com/OpenVidu/openvidu/raw/master/openvidu-test-e2e/docker/fakeaudio.wav --create-dirs --output /opt/openvidu-cache/fakeaudio.wav
        else
          echo "File $FAKE_AUDIO already exists"
        fi
      '''.stripIndent())
    },
    'Download custom layout': {
      sh 'sudo curl --location https://raw.githubusercontent.com/OpenVidu/openvidu/master/openvidu-test-e2e/docker/my-custom-layout/index.html --create-dirs --output /opt/openvidu-cache/test-layouts/layout1/index.html'
    }
  )
  parallel (
    'Pull openvidu/openvidu-test-e2e': {
      docker.image('openvidu/openvidu-test-e2e:$DISTRO').pull()
    },
    'Pull selenium/standalone-chrome': {
      docker.image('selenium/standalone-chrome:latest').pull()
    },
    'Pull selenium/standalone-firefox': {
      docker.image('selenium/standalone-firefox:latest').pull()
    },
    'Pull selenium/standalone-opera': {
      docker.image('selenium/standalone-opera:latest').pull()
    },
    'Pull openvidu/mediasoup-controller': {
      docker.image('openvidu/mediasoup-controller:$MEDIASOUP_CONTROLLER_DOCKER_VERSION').pull()
    }
  )

  def bindsArray = ['-v /var/run/docker.sock:/var/run/docker.sock:rw',
                    '-v /dev/shm:/dev/shm',
                    '-v /opt/openvidu:/opt/openvidu',
                    '-v /opt/openvidu-cache/barcode.y4m:/opt/openvidu/barcode.y4m',
                    '-v /opt/openvidu-cache/fakeaudio.wav:/opt/openvidu/fakeaudio.wav',
                    '-v /opt/openvidu-cache/test-layouts:/opt/openvidu/test-layouts',
                    '-v /opt/openvidu-cache/.m2:/root/.m2'].join(' ')

  docker.image('openvidu/openvidu-test-e2e:$DISTRO').inside('--name e2e -p 4200:4200 -p 4443:4443 -p 5555:5555 -u root -e MY_UID=0 ' + "${bindsArray}" + ' --privileged') {
    stage('Preparation') {
      sh 'rm -rf ~/.m2/repository/io/openvidu || true'
      sh 'rm -rf ~/.m2/repository/org/kurento || true'
      sh 'rm -rf openvidu || true'
      sh 'rm -rf kurento-java || true'
      sh 'git clone https://github.com/OpenVidu/openvidu.git'
      sh 'cd openvidu && git fetch --all && git checkout $OPENVIDU_COMMIT'
      sh(script: '''#!/bin/bash -xe
        if [[ $KURENTO_JAVA_COMMIT != "default" ]]; then
          git clone https://github.com/Kurento/kurento-java.git
          cd kurento-java
          git checkout -f $KURENTO_JAVA_COMMIT
          mvn -B clean install
        fi
      '''.stripIndent())
      sh(script: '''#!/bin/bash -xe
        if $KURENTO_MEDIA_SERVER_DEV ; then
          echo "Upgrading KMS to dev version"
          sudo apt-get update && sudo apt-get install -y aptitude
          sudo aptitude remove -y kurento-media-server
          DISTRO=`lsb_release --codename | cut -f2`
          sudo echo "deb [arch=amd64] http://ubuntu.openvidu.io/dev $DISTRO kms6" | sudo tee /etc/apt/sources.list.d/kurento.list
          sudo apt-get update && sudo apt-get --yes -o Dpkg::Options::="--force-confnew" install kurento-media-server
        fi
      '''.stripIndent())
    }

    stage('Build 1') {
      parallel 'OpenVidu Browser build': {
        stage('OpenVidu Browser build') {
          sh(script: '''#!/bin/bash -xe
            cd openvidu/openvidu-browser
            npm install --quiet --unsafe-perm
            npm run build --quiet
            npm pack --quiet
            cp openvidu-browser-*.tgz /opt/openvidu
          '''.stripIndent())
        }
      }, 'OpenVidu Node Client build': {
        stage('OpenVidu Node Client build') {
          sh(script: '''#!/bin/bash -xe
            cd openvidu/openvidu-node-client
            npm install --quiet --unsafe-perm
            npm run build --quiet
            npm pack --quiet
            cp openvidu-node-client-*.tgz /opt/openvidu
          '''.stripIndent())
        }
      }, 'OpenVidu Java Client build': {
        stage('OpenVidu Java Client build') {
          sh(script: '''#!/bin/bash -xe
            cd openvidu/openvidu-java-client
            mvn -B versions:set -DnewVersion=TEST
            mvn -B clean compile package
            mvn -B install:install-file -Dfile=target/openvidu-java-client-TEST.jar -DgroupId=io.openvidu -DartifactId=openvidu-java-client -Dversion=TEST -Dpackaging=jar
          '''.stripIndent())
        }
      }
    }

    stage('Build 2') {
      parallel 'OpenVidu TestApp build': {
        stage('OpenVidu TestApp build') {
          sh(script: '''#!/bin/bash -xe
          cd openvidu/openvidu-testapp
          npm install --unsafe-perm --quiet
          npm install /opt/openvidu/openvidu-browser-*.tgz --quiet
          npm install /opt/openvidu/openvidu-node-client-*.tgz --quiet
          export NG_CLI_ANALYTICS="false" && ./node_modules/@angular/cli/bin/ng build --prod --output-path=/opt/openvidu/testapp
        '''.stripIndent())
        }
      }, 'OpenVidu Server dashboard build': {
        stage('OpenVidu Server dashboard build') {
          sh(script: '''#!/bin/bash -xe
            cd openvidu/openvidu-server/src/dashboard
            npm install --unsafe-perm --quiet
            npm install /opt/openvidu/openvidu-browser-*.tgz --quiet
            export NG_CLI_ANALYTICS="false" && npm run build-prod --quiet
          '''.stripIndent())
        }
      }, 'OpenVidu Server pre-build': {
        stage('OpenVidu parent build') {
          sh(script: '''#!/bin/bash -xe
            if [[ $KURENTO_JAVA_COMMIT != "default" ]]; then
              cd kurento-java && MVN_VERSION=$(mvn -B -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
              cd ../openvidu && mvn -B versions:set-property -Dproperty=version.kurento -DnewVersion=$MVN_VERSION
            fi
          '''.stripIndent())
          sh 'cd openvidu && mvn -B versions:set-property -Dproperty=version.openvidu.java.client -DnewVersion=TEST'
          sh 'cd openvidu && mvn -B -DskipTests=true clean install'
        }
        stage('OpenVidu Server unit tests') {
          sh 'cd openvidu/openvidu-server && mvn -B -Dtest=io.openvidu.server.test.unit.*Test test'
        }
        stage('OpenVidu Server integration tests') {
          sh 'cd openvidu/openvidu-server && mvn -B -Dtest=io.openvidu.server.test.integration.*Test test'
        }
      }
    }

    stage('OpenVidu Server build') {
      sh(script: '''#!/bin/bash -xe
        cd openvidu/openvidu-server
        mvn -B package
        cp target/openvidu-server*.jar /opt/openvidu
      '''.stripIndent())
    }

    docker.image('selenium/standalone-chrome:latest').withRun('-p 6666:4444 --name chrome --shm-size=1g -v /opt/openvidu:/opt/openvidu') { a ->
      docker.image('selenium/standalone-firefox:latest').withRun('-p 6667:4444 --name firefox --shm-size=1g') { b ->
        docker.image('selenium/standalone-opera:latest').withRun('-p 6668:4444 --name opera --shm-size=1g') { c ->
          // -----
          // Kurento TESTS
          // -----
          stage ('Environment Launch Kurento') {
            environmentLaunch('kurento')
          }
          try {
            stage ('OpenVidu Kurento E2E tests') {
              try {
                openViduE2ETest('kurento')
              } catch (err) {
                // In case of error, fail the stage
                sh 'exit 1'
              } finally {
                junit 'openvidu/openvidu-test-e2e/**/target/surefire-reports/TEST-*.xml'
                archiveArtifacts artifacts: '**/openvidu-server-*.log'
              }
            }
          } catch (error) {
            echo 'Test failed'
            currentBuild.result = 'FAILURE'
          } finally {
            // Kill all environment for next test
            environmentStop()
          }

          // ----
          // Mediasoup TESTS
          // ----
          stage ('Environment Launch Mediasoup') {
            environmentLaunch('mediasoup')
          }
          try {
            stage ('OpenVidu Mediasoup E2E tests') {
              try {
                openViduE2ETest('mediasoup')
              } catch (err) {
                // In case of error, fail the stage
                sh 'exit 1'
              } finally {
                junit 'openvidu/openvidu-test-e2e/**/target/surefire-reports/TEST-*.xml'
                archiveArtifacts artifacts: '**/openvidu-server-*.log'
              }
            }
          } catch (error) {
            echo 'Test failed'
            currentBuild.result = 'FAILURE'
          } finally {
            environmentStop()
          }
        }
      }
    }
  }
}

def environmentLaunch(mediaServer) {
  sh 'openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj "/CN=www.mydom.com/O=My Company LTD./C=US" -keyout /opt/openvidu/testapp/key.pem -out /opt/openvidu/testapp/cert.pem'
  sh 'cd /opt/openvidu/testapp && http-server -S -p 4200 &> /opt/openvidu/testapp.log &'
  if (mediaServer == 'kurento') {
    sh '/usr/bin/kurento-media-server &> /kms.log &'
  } else if (mediaServer == 'mediasoup') {
    sh(script: '''#!/bin/bash -xe
      docker run --name=mediasoup --env=KMS_MIN_PORT=40000 --env=KMS_MAX_PORT=65535 \
      --env=OPENVIDU_PRO_LICENSE=$OPENVIDU_PRO_LICENSE \
      --env=OPENVIDU_PRO_LICENSE_API=$OPENVIDU_PRO_LICENSE_API \
      --env=WEBRTC_LISTENIPS_0_ANNOUNCEDIP=172.17.0.1 --env=WEBRTC_LISTENIPS_0_IP=172.17.0.1 \
      --volume=/opt/openvidu/recordings:/opt/openvidu/recordings --network=host --restart=always --detach=true \
      openvidu/mediasoup-controller:$MEDIASOUP_CONTROLLER_DOCKER_VERSION
    '''.stripIndent())
  }
  script {
    env.mediaServer = mediaServer
    sh(script: '''#!/bin/bash -xe
      KMS_IP=127.0.0.1
      if [[ "${mediaServer}" == "mediasoup" ]]; then
        KMS_IP=172.17.0.1
      fi
      until $(curl --insecure --output /dev/null --silent http://${KMS_IP}:8888/kurento); do echo "Waiting for ${mediaServer}..."; sleep 1; done
      if [ "$DOCKER_RECORDING_VERSION" != "default" ]; then
        echo "Using custom openvidu-recording tag: $DOCKER_RECORDING_VERSION"
        java -jar -DKMS_URIS=[\\"ws://${KMS_IP}:8888/kurento\\"] -DDOMAIN_OR_PUBLIC_IP=172.17.0.1 -DOPENVIDU_SECRET=MY_SECRET -DHTTPS_PORT=4443 -DOPENVIDU_RECORDING=true -DOPENVIDU_RECORDING_CUSTOM_LAYOUT=/opt/openvidu/test-layouts -DOPENVIDU_RECORDING_VERSION=$DOCKER_RECORDING_VERSION -DOPENVIDU_WEBHOOK=true -DOPENVIDU_WEBHOOK_ENDPOINT=http://127.0.0.1:7777/webhook /opt/openvidu/openvidu-server-*.jar &> openvidu-server-${mediaServer}.log &
      else
        echo "Using default openvidu-recording tag"
        java -jar -DKMS_URIS=[\\"ws://${KMS_IP}:8888/kurento\\"] -DDOMAIN_OR_PUBLIC_IP=172.17.0.1 -DOPENVIDU_SECRET=MY_SECRET -DHTTPS_PORT=4443 -DOPENVIDU_RECORDING=true -DOPENVIDU_RECORDING_CUSTOM_LAYOUT=/opt/openvidu/test-layouts -DOPENVIDU_WEBHOOK=true -DOPENVIDU_WEBHOOK_ENDPOINT=http://127.0.0.1:7777/webhook /opt/openvidu/openvidu-server-*.jar &> openvidu-server-${mediaServer}.log &
      fi
    '''.stripIndent())
  }
  sh 'until $(curl --insecure --output /dev/null --silent --head --fail https://OPENVIDUAPP:MY_SECRET@localhost:4443/); do echo "Waiting for openvidu-server..."; sleep 2; done'
}

def environmentStop() {
  sh 'kill -9 $(pidof kurento-media-server) || true'
  sh 'kill -9 $(pgrep -f /opt/openvidu/openvidu-server) || true'
  sh 'docker rm -f mediasoup || true'
}

def openViduE2ETest(mediaServer) {
  script {
    env.mediaServer = mediaServer
    sh(script: '''#!/bin/bash -xe
      cd openvidu/openvidu-test-browsers
      mvn -B versions:set -DnewVersion=TEST && mvn -B clean install
      cd ..
      mvn -B versions:set-property -Dproperty=version.openvidu.java.client -DnewVersion=TEST
      mvn -B versions:set-property -Dproperty=version.openvidu.test.browsers -DnewVersion=TEST
      cd openvidu-test-e2e
      mvn -B -DskipTests=true clean install
      sudo mvn -B -DMEDIA_SERVER=${mediaServer} -Dtest=OpenViduTestAppE2eTest -DAPP_URL=https://172.17.0.1:4200/ -DOPENVIDU_URL=https://172.17.0.1:4443/ -DREMOTE_URL_CHROME=http://172.17.0.1:6666/wd/hub/ -DREMOTE_URL_FIREFOX=http://172.17.0.1:6667/wd/hub/ -DREMOTE_URL_OPERA=http://172.17.0.1:6668/wd/hub/ -DEXTERNAL_CUSTOM_LAYOUT_URL=http://172.17.0.1:5555 -DEXTERNAL_CUSTOM_LAYOUT_PARAMS=sessionId,CUSTOM_LAYOUT_SESSION,secret,MY_SECRET test
    '''.stripIndent())
  }
}
